name: Build code, run unit test, run SAST, SCA, DAST security scans

on: 
  push:
    branches:
      - main
      - master
   

jobs:
  build:
    runs-on: ubuntu-latest
    name: Run unit tests and SAST scan on the source code 
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven cloud
        run:  mvn -B verify sonar:sonar -Dsonar.projectKey=devsecops-github-actions-pj -Dsonar.organization=devsecops-github-actions-pj -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy and perform SCA scan on Dev
    if: github.event_name == 'pull_request'
    environment: 
      name: dev
      url: 'http://dev.myapp.com'
    steps:
      - uses: actions/checkout@master
      - name: RunSnyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: Stage
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy
      id: deploy
      run: |
        echo "Place your deployment commands here"
        echo "::set-output name=deployment-url::http://example.com"  # Replace with your actual deployment URL

    - name: Await manual approval
      uses: actions/github-script@v5
      with:
        script: |
          const { data: { id: deployment_id } } = await github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            required_contexts: [],
            environment: 'Stage',
            transient_environment: false,
            auto_merge: false,
            description: 'Deploy to production',
          });
          await github.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id,
            state: 'in_progress',
          });
